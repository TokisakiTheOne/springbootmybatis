1.String的是怎样实现的？有哪些重要的方法？

标准的回答：(JDK1.8)
String内部实际存储结构为char数组
public final class String
    implements java.io.Serializable, Comparable<String>, CharSequence {
    //用于存储字符串的值
    private final char value[];
    //缓存字符串的 hashcode
    private int hash; // Default to 0。

}





      1.构造方法   4个重要的构造方法
          //String参数的构造
          public String(String original) {
              this.value = original.value;
              this.hash = original.hash;
          }

          //char[]参数的构造
          public String(char value[]) {
              this.value = Arrays.copyOf(value, value.length);
          }
          //StringBuffer
          public String(StringBuffer sb){
            synchronized(sb){
              this.value=Arrays.copyOf(sb.getValue,sb.length());
            }
          }
           //StringBuilder
           public String(StringBuilder sb){
               synchronized(sb){
                this.value=Arrays.copyOf(sb.getValue,sb.length());
            }
          }
       2. equals() 比较字符串是否相等
         public boolean equals(Object anObject) {
                //对象引用相同直接返回true
               if (this == anObject) {
                   return true;
               }
               // 判断对比的值是否为String类型，不是直接返回false
               if (anObject instanceof String) {
                   String anotherString = (String)anObject;
                   int n = value.length;
                   if (n == anotherString.value.length) {
                   //把两个字符串都拆分成字符数组
                       char v1[] = value;
                       char v2[] = anotherString.value;
                       int i = 0;
                       //循环对比两个字符串中的每一个字符是否相等
                       while (n-- != 0) {
                           //如果其中一个字符串不相等，就直接返回false
                           if (v1[i] != v2[i])
                               return false;
                           i++;
                       }
                       return true;
                   }
               }
               return false;
           }
      String类型重写了Object的equals方法 在判断的时候需要传递一个Object类型的参数
      在比较的时候 会先通过 instanceof 判断是否为String类型
      * equalsIgnoreCase()  忽略大小写

      3.compareTo()  字符串  比较
          public int compareTo(String anotherString) {
              int len1 = value.length;
              int len2 = anotherString.value.length;
              //获取到两者之间长度短的 int值
              int lim = Math.min(len1, len2);
              //把两个字符串都拆分成字符数组
              char v1[] = value;
              char v2[] = anotherString.value;

              int k = 0;
              //对比每一个字符
              while (k < lim) {
                  char c1 = v1[k];
                  char c2 = v2[k];
                  if (c1 != c2) {
                      //又字符不相等就返回差值
                      return c1 - c2;
                  }
                  k++;
              }
              return len1 - len2;
          }
          * compareToIgnoreCase()  忽略大小写


          equals  compareTo
          equals可以接受Object类型的参数，compareTo 只能接受String类型
          equals返回值为Boolean    compareTo 返回值为int
          两种都能判断字符串相等与否  判断相等的依据
          equals  true        compareTo   0

      4.其他重要方法
         indexOf()        查询字符串首次出现的下标位置
         lastIndexOf()    查询字符串最后出现的下标位置
         contains()       查询字符串中是否包含另外一个字符串
         toLowerCase()    转小写
         toUpperCase()    转大写
         length()         字符串长度
         trim()           去掉字符串首尾的空格
         replace()        替换掉字符串中的某个字符
         split()          把字符串拆分成数组
         join()           把字符串数组转为字符串


      & 1.为什么String类型要用final?
            1.1 final修饰的类不能被继承   （值是不能被修改的）反射
            如果在传参的时候 不需要考虑谁会修改它的值
            1.2 安全
            1.3 高效  字符串常量池可以为我们提供缓存字符串，提高程序的运行效率
        2.== 和 equals 区别是什么?
           ==对于基本数据类型 比较的是“值” 看看值是否相等
           对于  引用类型       比较的是引用地址是否相同

            Object中  equals 方法其实就是==
            String重写equals 方法把它修改成两个字符串的值是否相等

        String   StringBuilder  StringBuffer有什么区别
         String                 不可变类  所以每次拼接使用String的话 性能会很低  (性能差)
          StringBuffer        (安全性高，性能一般)
                     synchronized    来保持线程安全  提供了  append  和  insert方法进行拼接
          @Override
             public synchronized StringBuffer append(Object obj) {
                 toStringCache = null;
                 super.append(String.valueOf(obj));
                 return this;
             }

             @Override
             public synchronized StringBuffer append(String str) {
                 toStringCache = null;
                 super.append(str);
                 return this;
             }
         StringBuilder  从JDK1.5  出现   (性能高，安全差) 在非并发环境下优先使用
         append  insert
          public AbstractStringBuilder append(Object obj) {
                 return append(String.valueOf(obj));5
             }

        String的 intern()方法有什么含义
        String类型 在  JVM中 如何存储的？编译器又对String做了哪些优化呢？
         String常见的创建方式   new String();  直接赋值
         直接赋值的方式会向常量池中查找是否存在这个值  如果存在，就把引用地址指向此值
         否则会先在常量池中创建 然后再打引用指向此值
         JDK1.7之后 把永生代换成元空间，把字符串常量池从方法区转移到了Java堆上

      优化
                String s1="Ja"+"va";    在JVM中编译过程会直接把当前的"Ja"+"va" 转换成 "Java"
                String s2="Java";
                System.out.println(s1==s2);  true

2.线程的状态有哪些？它是如何工作的？
   线程(Thread) 是并发编程的基础，也是程序执行的最小单元，它依托进程而存在。一个进程可以包含多个线程。
   多线程可以共享一块内存和一组系统资源，因此线程之间的切换更加节省资源、更加轻量化，（轻量级进程）

   JDK1.5之后 以枚举的类型定义在Thread源码中   6个状态

   1.  NEW
        新建状态  线程被创建出来，没有启动的时候
   2.  RUNNABLE
        就绪状态  表示可以运行的线程状态，它可能正在运行，或者排队等待CPU分配资源运行
   3.  BLOCKED
        阻塞等待锁的线程状态
        (阻塞状态)
        表示处于阻塞状态的线程正在等待监视器锁， 比如等待执行 synchronized 代码块或者 synchronized 标记的方法
   4.  WAITING
        等待状态 一个处于等待状态的线程正在等待另一个线程执行某个特定动作
        Object.wait();    其他线程调用  Object.notify() 或者  Object.notifyAll()
   5.  TIMED_WAITING
        计时等待状态  和等待状态类似，多设置了超时时间
        Object.wait(long timeout);     Thread.join(long timeout)
   6.  TERMINATED4
        终止状态 表示线程已经执行完成

   线程的工作模式：
       1.首先先创建线程并指定需要执行的方法，然后调用线程的 start()方法,此时线程就从NEW=>RUNNABLE
       2.线程会判断要执行的方法中有没有synchronized同步代码块，如果有并且其他线程也在使用，那么线程会变为BLOCKED
       3.当其他线程使用完这个锁之后，线程会继续执行剩余的方法
       4.当遇到Object.wait()  或者 Thread.join() 方法时，线程会变为WAITING，若果时带了超时时间的方法 那么会进入
       TIMED_WAITING，当其他线程执行了Object.notify() 或者  Object.notifyAll()，线程会被唤醒继续执行剩余的方法
       直到方法全部执行完毕，最后进入TERMINATED


   BLOCKED 和 WAITING 有什么区别?
   start()方法和run()有什么区别?
   线程的优先级有什么用？怎么设置？

   线程的常用方法有哪些？
   1.join()
     在一个线程中调用other.join()，这时当前线程会让出执行权给other线程，知道other线程执行完毕，或者过了超时时间，然后在运行当前线程
     public final synchronized void join(long millis)
        throws InterruptedException {
            long base = System.currentTimeMillis();
            long now = 0;
            //超时时间不能小于 0
            if (millis < 0) {
                throw new IllegalArgumentException("timeout value is negative");
            }
            //0 代表无限等待
            if (millis == 0) {

                while (isAlive()) {
                    wait(0);
                }
            } else {
                while (isAlive()) {
                    long delay = millis - now;
                    if (delay <= 0) {
                        break;
                    }
                    wait(delay);
                    now = System.currentTimeMillis() - base;
                }
            }
        }

     yield()   本地方法   C 或者C++实现的
         public static native void yield();
         该方法表示给线程调度器一个当前线程愿意让出CPU使用权的暗示，但是线程调度器可能会忽略这个暗示
         使用这个方法可能每次执行的结果都不一样，这是因为这个方法非常不稳定，线程调度器不一定会采纳yield出让CPU资源的建议



   谈谈你对锁的理解？  如何动态模拟一个死锁？
      并发编程中 两个重要概念  线程  和  锁
      多线程是把双刃剑  提高程序性能的同时，也带来了编码的复杂性，对开发者的要求也提了一个档次
    锁的出现就是为了保证多线程在同时操作一组资源时的一致性，当我们给资源加上所之后，只有拥有这个
    锁的线程才能操作当前资源，其他线程只能排队。

    死锁：两个线程同时占用两个资源，又想要使用对方的资源，由于锁的关系 不得不等待对方把资源释放 的互相僵持状态
         线程一         线程二
          拥有           拥有

          锁A            锁B
     我们使用线程一拥有锁lock1的同时  试图获取lock2  而线程二拥有lock2同时试图获取lock1
     这样会造成两方都在等对面释放资源，然后就造成了死锁

        锁是指在并发编程中，当有多个线程同时操作一个资源时，为了保证数据操作的正确性，我们需要让多线程
     排队一个一个的操作这个资源，而这个过程就是给资源 加锁  释放锁的过程

   1.悲观锁 和 乐观锁
      悲观锁指的是 数据对外界的修改采用保守策略，认位线程很容易修改数据的值，因此在整个数据被修改的过程中
      会采用锁定状态，直到一个线程使用完，其他线程才可以使用
Compiled from "LockExample.java"
public class com.lagou.interview.ext.LockExample {
  public com.lagou.interview.ext.LockExample();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return
 
  public static void main(java.lang.String[]);
    Code:
       0: ldc           #2                  // class com/lagou/interview/ext/LockExample
       2: dup
       3: astore_1
       4: monitorenter // 加锁
       5: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;
       8: ldc           #4                  // String lock
      10: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      13: aload_1
      14: monitorexit // 释放锁
      15: goto          23
      18: astore_2
      19: aload_1
      20: monitorexit
      21: aload_2
      22: athrow
      23: return
    Exception table:
       from    to  target type
           5    15    18   any
          18    21    18   any
}

    被synchronized修饰的代码块  在执行之前先使用 monitorenter指令加锁，执行结束之后 通过指令monitorexit 解锁，整个过程中
    执行的代码都是被锁定的状态，这个就是悲观锁实现的流程

    乐观锁和悲观锁的概念相反，乐观锁任务一般情况下数据在修改时不会出现冲突，所以在数据访问之前不会加锁，但是会在数据提交更改时
    对数据进行检测
    Java 乐观锁  CAS    Compare And Swap  比较并交换      ABA问题 （解决ABA问题  版本号stamp  每次比较时不仅仅之比较当前值，还比较版本号）
                                                          线程拿到了最初的值A  然而将要进行CAS的时候 被其他线程抢占了执行权
                                                          ，把此值改为B，然后其他线程又把此值从B变成了A，但是此时的A已经不是原来的A值了
                                                          但时最原始的线程并不知道这个情况，在进行CAS的时候，就只对比了原来的初始值A就进行了修改

     乐观锁有一个优点：因为是提交的时候才进行锁定的  因此不会造成线程死锁


   2.它们的应用有哪些  乐观锁有什么问题？

   3.什么时可重入锁  用代码怎么实现  实现的原理
   4.什么是共享锁  什么是独占锁






MySQL的运行机制是什么  有哪些引擎？

    MySQL执行流程  1.首先客户端先发送用户信息去服务器端进行授权认证，
          (如果是命令行工具
          mysql -h 主机名(IP地址) -u(用户名) -P(端口号) -p(密码))
           2.当服务器端连接成功之后就可以正常执行SQL命令了
             (MySQL服务器拿到SQL命令之后，会使用MySQL的分析其解析SQL指令
              会根据语法分析器验证SQL指令，查询SQL指令是否满足MySQL的语法规则)
             如果不支持此语法  会提示 SQL syntax
           3.当分析器验证并且解析SQL命令之后，会进入优化器阶段，执行生成计划，并设置
           相应的索引，当上面的步骤都执行完成之后，就进入了执行器阶段，正式开始执行SQL命令
           (执行之前，服务器会对你的执行命令进行权限查询，看看是否又操作某表的权限，如果有权限
           那么执行器就会去调用MySQL数据看引擎提供的接口，执行相应的命令)
           如果是非查询操作服务器会记录对应的操作日志，在命令执行完成之后返回结果给客户端
           PS:如果select语句并且在MySQL8.0之前  服务器查询的时候会从之前的查询缓存中查看是否
           执行锅这条语句， 如果有  就直接返回查询结果，会提高查询性能

    有哪些引擎？
        通过 SHOW ENGINES命令查询MySQL使用的存储引擎
        常见的数据库引擎   INNODB    MyISAM   MEMORY
        Inno DB   MySQL 5.5.5 之后开始 作为默认引擎
         优势：
            1.支持事务功能，支持4种隔离级别
                   1.读未提交：一个事务没有提交时，它做的变更就能被其他事务看到
                   2.读已提交：一个事务只有提交之后，它做的变更才能被其他事务看到
                   3.可重复读：默认的隔离级别  一个事务在执行的过程中（从开始到结束）看到数据都是一致的，在过程中
                   未提交的变更对其他事务也是不可见的
                   4.可串行化：对同一行记录读 写都会添加读锁和写锁，后面的事务只能等前一个事务执行完成之后才能继续执行（这个事务执行效率很低）
            2.支持外键、崩溃后的快速恢复 全文检索(5.6.4 之后的版本才有) 集群索引 地理位置类型的存储和索引等功能

        MyISAM 是MySQL的原生引擎，但是不支持事务  被InnoDB取代的主要原因
            不支持事务 但是插入查询速度比较高
            有独立的索引文件，因此在读取数据方面性能很高
            支持全文索引 地理位置存储和索引      但是不支持外键
        MEMORY
            内存型数据库引擎，会把表中的数据存到内存中，具备最快速的查询效率(一旦内存释放(重启数据库)，数据全部会丢失)

     InnoDB  MyISAM 都支持持久化  MEMORY由于存在内存中 重启就会丢失数据  但是 优势执行速度快  可以作为临时表
     8.0之前 InnoDB引擎不会把索引持久化 索引重启服务之后 记录的索引就会丢失
             MyISAM会把自增索引持久化到日志中  所以无论如何重启 索引记录不会丢失
     8.0之后 InnoDB已经可以持久化存储自增索引了
      可以根据不同表的需求 设置不同的数据引擎  在创建表的时候指定  engine=Memory

    查询缓存有哪些问题(8.0之后删除了查询缓存的所有功能)
       SHOW GLOBAL VARIABLES LIKE 'query_cache_type'  8.0之前可以查看数据库是否开启了查询缓存功能
       OFF:关闭了查询缓存功能
       ON: 开启了查询缓存功能
       DEMAND:在sql语句中执行sql_cache关键字才会有查询缓存  select sql_cache * from dept
       可以修改MySQL的配置文件  my.cnf       query_cache_type=ON/OFF/DEMAND  修改完配置文件 重启才能生效

    比如我们每条sql都缓存  任何一条对表的更改(增删改)操作  都会把所有的查询缓存全部清空
    在更新频率相对较高的业务中，查询缓存就完全是一个鸡肋

   如何选择数据库引擎
      1.是否需要支持事务
      2.是否需要支持持久化
      3.是否需要支持外键
      4.是否支持地理位置存储  索引等各方面的综合考量


   MySQL的优化方案？(查询效率)
      MySQL常见的优化手段
      1.  SQL和索引优化
           1.1 使用正确的索引
             索引是数据库中最重要的概念之一  也是提高数据库性能最有效的手段之一
             索引可以说是数据库中的目录，通过目录可以快速定位到相关内容
             （假如数据库中没有添加索引，那么在查询的时候就会触发全表扫描，因此查询的数据变得很多
             效率会大大降低）
           PS:我们查询的时候应该尽可能的使用主键索引查询，因为主键查询不会触发回表查询，因此提高了效率

           MySQL 5.0 之前  尽量避免SQL语句中出现 OR 查询（OR会导致索引失效）
             可以使用 union 或者使用子查询
           MySQL 5.0 之后  引入了索引合并，把多条件查询 （or  and）的结果进行合并交集或者并集的功能
             避免 在where 条件语句中 使用 !=  <>操作符 会造成查询引擎放弃索引而进行全表扫描

           适当使用前缀索引，MySQL是支持前缀的索引的 比如我们定义字符串的一部分做为索引
                          比如邮箱  @xxx.com  有一些前缀或者后缀固定的字段 就非常适合定义前缀索引
           1.2 查询具体的列而非全部列
               尽量避免使用 select *  而是查询需要的字段
           1.3 优化子查询
               尽量使用join来代替子查询，因为子查询是嵌套查询,而嵌套查询会创建一张临时表，二期临时表的创建和销毁会占用
               一定的系统资源已经花费一定的时间 但是  join语句不会创建临时表，因此性能更高
           1.4 注意查询结果集
               尽量使用小表驱动大表的方式进行查询  如果B表数据量小于A表数据 那么执行顺序就应该先查B表 在查询A表
                  select name from A where id in (select id from B)
           1.5 不要在列上面进行运算操作
             列字段不要进行算术运算符或者其他表达式 ，他们可能会导致查询引擎无法正确使用索引
           1.6 适当增加冗余字段(以空间换时间的优化策略)
           增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低 可以适当增加冗余字段
           减少多张表直接的关联 (慎用！)
      2.  数据库结构优化
           2.1 使用最小的数据长度
           设置表列的大小时 尽量采取最小的单位
            ex：身份证18位 可以为 char(18) 就不要设置为 varchar(18)
           2.2 使用简单的数据类型
             能使用int 就不用 varchar   int类型比varchar类型查询效率高
           2.3 尽量少定义text类型
             text类型查询效率特别第  如果必须要使用text而类型的话，可以把这个字段拆分成子表，查询的时候连表查询
             这样可以提高主表的查询效率
           2.4 适当使用分表 分库的策略
             分表： 垂直分割
                 当一张表中的字段非常多的时候，可以尝试将一个达标拆分成多个子表，把查询频率比较高的列放到主表，其他放入子表
                 这样大部分查询只需要查询字段更少的主表就行了
             分库： 水平分割
                 把一个数据库分为多个数据库，一个主数据库用于写入和修改数据，其他的用于同步主数据库并提供给客户端查询
                 这样就把一个数据库的  读  和 写 的压力 分摊到了多个数据库  从而提高了数据库整体的运行效率
      3.  系统硬件优化
          3.1 磁盘
              固态
              应该尽量使用高性能（读写能力）的磁盘   固态硬盘 这样可以减少 I/O 运行的时间
              机械
              使用磁盘阵列
              1000G    500G  500G
              因为磁盘的转速是固定的，有个多小的磁盘的话 就相当于有多个并行运行的磁盘一样
              使用固态硬盘组成磁盘阵列
          3.2 网络
              保证网络带宽流畅（低延迟）   带宽越大越好
              条件允许的话可以设置多个网卡，提高网络高峰期MySQL服务器运行的效率
          3.3 内存
              MySQL服务器内存越大 能存储和缓存的信息也就越多，而且内存的性能是非常高的  所以可以加装内存提高性能


      联合索引需要注意什么问题？
      如何排查慢SQL？

















